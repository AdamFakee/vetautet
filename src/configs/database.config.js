'use strict'
require('dotenv').config();
const Sequelize = require('sequelize');

class Database {
  constructor() {
    this.masterDb = this.createConnection(1433, 'MASTER DB');
    this.slaveDb = this.createConnection(49781, 'SLAVE DB'); 
    this.getDetailedInfo()
  }

  createConnection (port, typeDbName) {
    return new Sequelize('vettautet', 'sa', '123456', {
      host: 'localhost',       // ƒë·ªãa ch·ªâ IP c·ªßa m√°y ch·ªß
      dialect: 'mssql',
      port: port,               
      dialectOptions: {
        options: {
          encrypt: false,         // n·∫øu kh√¥ng d√πng SSL
          trustServerCertificate: true,
        }
      },
      pool: {
        max: 15,
        min: 0,
        acquire: 30000,
        idle: 10000
      },
      logging: (sql) => console.log(`${typeDbName} DB::::`, sql)}
    );
  }
  async testConnections() {
    try {
      console.log('üîç Testing Master Database Connection...');
      await this.masterDb.authenticate();
      console.log('‚úÖ K·∫øt n·ªëi t·ªõi Master Database th√†nh c√¥ng!');

      console.log('üîç Testing Slave Database Connection...');
      await this.slaveDb.authenticate();
      console.log('‚úÖ K·∫øt n·ªëi t·ªõi Slave Database th√†nh c√¥ng!');
    } catch (error) {
      console.error('‚ùå L·ªói k·∫øt n·ªëi:', error);
    }
  }

  // check th√¥ng s·ªë k·∫øt n·ªëi ƒë·ªÉ xem ƒë√∫ng port + server hay ch∆∞a
  async getDetailedInfo() {
    try {
      console.log('\nüìä Chi ti·∫øt k·∫øt n·ªëi Master Database:');
      const masterInfo = await this.masterDb.query(`
        SELECT 
          @@SERVERNAME as ServerName,
          @@SERVICENAME as ServiceName,
          DB_NAME() as DatabaseName,
          SERVERPROPERTY('InstanceName') as InstanceName,
          SERVERPROPERTY('ServerName') as FullServerName,
          CONNECTIONPROPERTY('local_net_address') as LocalAddress,
          CONNECTIONPROPERTY('local_tcp_port') as LocalPort
      `, {
        type: Sequelize.QueryTypes.SELECT
      });
      console.table(masterInfo[0]);

      console.log('\nüìä Chi ti·∫øt k·∫øt n·ªëi Slave Database:');
      const slaveInfo = await this.slaveDb.query(`
        SELECT 
          @@SERVERNAME as ServerName,
          @@SERVICENAME as ServiceName,
          DB_NAME() as DatabaseName,
          SERVERPROPERTY('InstanceName') as InstanceName,
          SERVERPROPERTY('ServerName') as FullServerName,
          CONNECTIONPROPERTY('local_net_address') as LocalAddress,
          CONNECTIONPROPERTY('local_tcp_port') as LocalPort
      `, {
        type: Sequelize.QueryTypes.SELECT
      });
      console.table(slaveInfo[0]);

      // So s√°nh ƒë·ªÉ xem c√≥ kh√°c nhau kh√¥ng
      const masterPort = masterInfo[0].LocalPort;
      const slavePort = slaveInfo[0].LocalPort;
      const masterInstance = masterInfo[0].InstanceName;
      const slaveInstance = slaveInfo[0].InstanceName;

      console.log('\nüîç Ph√¢n t√≠ch k·∫øt n·ªëi:');
      console.log(`Master Port: ${masterPort}, Instance: ${masterInstance || 'Default'}`);
      console.log(`Slave Port: ${slavePort}, Instance: ${slaveInstance || 'Default'}`);
      
      if (masterPort === slavePort && masterInstance === slaveInstance) {
        console.log('‚ö†Ô∏è  C·∫¢NH B√ÅO: C·∫£ hai ƒëang k·∫øt n·ªëi t·ªõi c√πng m·ªôt instance!');
        return false;
      } else {
        console.log('‚úÖ K·∫øt n·ªëi t·ªõi c√°c instance kh√°c nhau!');
        return true;
      }

    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin database:', error);
      return false;
    }
  }

  getMasterDb() {
    return this.masterDb;
  }

  getSlaveDb() {
    return this.slaveDb;
  }
}

module.exports.DatabaseConfig = Database;